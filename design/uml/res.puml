@startuml
set separator ::

class rs::Shader {
	+create(vert, frag)
	+destroy()
	..
	+use()
	..
	+setUniform(name, value)
	--
	{static} -CheckCompileErrors(shader)
	{static} -CheckLinkingErrors(program)
	..
	-id: uint
}

class rs::TextureFormat {
	+filtered: bool
	+textureFormat: int
	+sourceFormat: int
	+mipmaps: int
}
hide TextureFormat methods

class rs::Texture {
	+create(width, height, data, format)
	+create(fileName, filtered, mipmaps)
	+create()
	+destroy()
	..
	+use(index)
	..
	+getWidth() : int
	+getHeight() : int
	+getId() : uint
	--
	-width: int
	-height: int
	-id: uint
}

class rs::Material {
	+create(&shader)
	..
	+use()
	..
	+addTexture(index, &texture)
	+setUniform(name, value)
	--
	-shader: &Shader
	-textures: &Texture[]
	-uniforms: map<str, variant>
}

class rs::Vertex {
	+position: Vec3
	+color: Vec3
	+atlas: Vec2
	+normal: Vec3
}
hide Vertex methods

class rs::Mesh {
	+create()
	+destroy()
	..
	+addVertex(vertex)
	+addGeometry(gd)
	..
	+clear()
	+draw()
	--
	-vao: uint
	-vbo: uint
	-vertices: Vertex[]
}

class rs::Glyph {
	+width: int
	+advance: int
	+uv: Vec4
}
hide Glyph methods

class rs::Font {
	+create(&texture, fileName, size, filtered)
	..
	+getTexture() : &Texture
	+getGlyph(c) : Glyph
	+getSize() : int
	+getWidth() : int
	+getHeight() : int
	--
	-size: int
	-texture: &Texture
	-glyphs: Glyph[]
}

class rs::Sound {
	+create(fileName)
	+destroy()
	..
	+play()
	+loop()
	+stop()
	..
	+isPlaying() : bool
	+isLooping() : bool
	--
	-source: ma_sound
	-pooping: bool
	-playing: bool
}

class rs::ResourceManager {
	+initFromConfig(fileName)
	..
	+createShader(name, ...) : &Shader
	+createTexture(name, ...) : &Texture
	+createMaterial(name, ...) : &Material
	+createMesh(name, ...) : &Mesh
	+createFont(name, ...) : &Font
	+createSound(name, ...) : &Sound
	+destroy()
	..
	+getShader(name) : &Shader
	+getTexture(name) : &Texture
	+getMaterial(name) : &Material
	+getMesh(name) : &Mesh
	+getFont(name) : &Font
	+getSound(name) : &Sound
	--
	-stringToShader(configLine)
	-stringToTexture(configLine)
	-stringToMaterial(configLines)
	-stringToFont(configLine)
	-stringToSound(configLine)
	..
	-shaders: map<str, Shader>
	-textures: map<str, Texture>
	-materials: map<str, Material>
	-meshes: map<str, Mesh>
	-fonts: map<str, Font>
	-sounds: map<str, Sound>
}

Texture <-down- TextureFormat

Material <-- Shader
Material <-- Texture

Mesh <-down- Vertex

Font <-left- Glyph

ResourceManager *-down- Shader
ResourceManager *-down- Texture
ResourceManager *-left- Material
ResourceManager *-right- Mesh
ResourceManager *-up- Font
ResourceManager *-up- Sound

@enduml
