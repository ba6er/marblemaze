@startuml
set separator ::

enum gm::GameState {
	MenuMain
	MenuOptions
	MenuLevels
	ScenePlaying
	ScenePaused
	SceneWin
}
hide GameState methods

class gm::GameOptions {
	{static} +DefaultValues() : GameOptions
	..
	+mouseSensitivityX: float
	+mouseSensitivityY: float
	+scrollSensitivity: float
	+mazeYawSensitivity: float
	+mazeRollSensitivity: float
}
hide GameOptions methods

class gm::Game {
	+onInit(width, height, internalWidth, internalHeight, resource, initOptions)
	+onUpdate(deltaTime, currentTime, resource, input) : bool
	+onRender(deltaTime, currentTime, resource)
	+onResize(width, height)
	..
	+getState() : GameState
	+setState(state)
	..
	+optionWholeValues: int[]
	--
	-onStateMenuMain(deltaTime, currentTime, resource, input) : bool
	-onStateMenuOptions(deltaTime, currentTime, resource, input) : bool
	-onStateMenuLevels(deltaTime, currentTime, resource, input) : bool
	-onStateScenePlaying(deltaTime, currentTime, resource, input) : bool
	-onStateScenePaused(deltaTime, currentTime, resource, input) : bool
	-onStateSceneWin(deltaTime, currentTime, resource, input) : bool
	..
	-internalPosition(x, y) : Vec2
	..
	-options: GameOptions
	-state: GameState
	..
	-frameSize: Vec2
	-internalSize: Vec2
	-gui: GUI
	..
	-menuCameraYaw, menuCameraPitch, menuCameraDistance: float
	..
	-selectedSceneIndex, numLoadedScenes: int
	-scenes: Scene[]
	-menuScene: Scene
	-currentScene: &Scene
}

class gm::Scene {
	+createFromFile(fileName, resource) : bool
	+createMenuScene(resource)
	+restart()
	+destroy()
	..
	+setCameraValues(yaw, pitch, distance)
	+updateCamera(deltaYaw, deltaPitch, deltaDistance)
	+updateMazeRotation(deltaPitch, deltaRoll)
	+updatePhysics(deltaTime)
	+updateTimer(deltaTime)
	..
	+getId() : str
	+checkWinCondition() : bool
	+getTime() : float
	..
	+getCameraYaw() : float
	+getCameraPitch() : float
	+getCameraDistance() : float
	..
	+setProjection(fov, aspect)
	+display()
	+shoudPlaySound() : bool
	--
	-marbleBlockCollision(x, y, z, deltaTime)
	..
	{static} -DistanceSphereAABB(box, sphere) : float
	..
	-id: str
	-timer: float
	..
	-camera: Camera
	-renderables: Renderable[]
	-lights: Light[]
	..
	-marble: Marble
	-maze: Maze
	-start, finish, initCameraValues: Vec3
	..
	-cameraDistance, cameraYaw, cameraPitch: float
	-marbleIsTouchingWalls: bool[3]
	-marbleWasTouchingWalls: bool[3]
}

enum gm::BlockType {
	Empty
	Wall
	Start
	Finish
}
hide BlockType methods

class gm::Maze {
	+create(initBlocks)
	..
	+getBlock(x, y, z) : BlockType
	+setBlock(x, y, z, block)
	..
	+toGeometry() : GeometryData
	..
	+getWidth() : int
	+getHeight() : int
	+getDepth() : int
	..
	+transform: Mat4
	--
	-width, height, depth: int
	-blocks: BlockType[]
}

class gm::Marble {
	+toGeometry() : GeometryData
	..
	+transform: Mat4
	..
	+position: Vec3
	+velocity: Vec3
	+direction: Vec3
	+radius: float
	+speed: float
}

Maze <-down- BlockType

Scene *-left- Maze
Scene *-down- Marble

Game <-up- GameOptions
Game <-left- GameState
Game <-- Scene

@enduml
